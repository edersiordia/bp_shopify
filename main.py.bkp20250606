from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from urllib.parse import urlencode
from pprint import pprint
import hmac
import hashlib
import requests
import firebase_admin
from firebase_admin import credentials, db
from datetime import datetime
from fastapi.responses import HTMLResponse



# Inicializaci√≥n
app = FastAPI()

cred = credentials.Certificate("firebase_key.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://rastreador-gps2-default-rtdb.firebaseio.com'
})

# Credenciales de tu app de Shopify
SHOPIFY_CLIENT_ID = "d7ad6eca784abff38f6c1b06e19a0809"
SHOPIFY_CLIENT_SECRET = "51690bac71da36dbb5c00c854cbbdcc6"

@app.get("/")
def home():
    return {"mensaje": "FastAPI conecta correctamente"}





# Enpoint al que el modal flotante de shopify se conecata para obteter datos de firebase.

@app.get("/puntos/vista/{email}", response_class=HTMLResponse)
def vista_puntos(email: str):
    contact_email = email.replace(".", "_").replace("@", "_at_")
    ruta_cliente = f"mi_shopify/puntos_clientes/{contact_email}"


    #Mensge que enviara si el usuario no tiene una session iniciada de shopify.
    cliente = db.reference(ruta_cliente).get()
    if not cliente:
        return HTMLResponse(content="""
			<html lang="es">
			<head>
			  <meta charset="UTF-8">
			  <title>Bienvenida Carnicash</title>
			  <style>
				body {
				  margin: 0;
				  font-family: 'Segoe UI', sans-serif;
				  background-color: #f9f9f9;
				  overflow-x: hidden;
				}

				.fade-in-up {
				  opacity: 0;
				  transform: translateY(40px);
				  animation: fadeUp 0.8s ease-out forwards;
				}

				.fade-delay-1 {
				  animation-delay: 0.3s;
				}

				.fade-delay-2 {
				  animation-delay: 0.6s;
				}

				.fade-delay-3 {
				  animation-delay: 0.9s;
				}

				@keyframes fadeUp {
				  to {
					opacity: 1;
					transform: translateY(0);
				  }
				}

				.header {
				  background: linear-gradient(135deg, #4a00e0, #8e2de2);
				  color: white;
				  padding: 2rem 1rem 3rem;
				  text-align: center;
				  border-bottom-left-radius: 20px;
				  border-bottom-right-radius: 20px;
				}

				.header h1 {
				  margin: 0.2rem 0;
				  font-size: 2rem;
				}

				.container {
				  max-width: 400px;
				  margin: -2rem auto 1.5rem;
				  background: white;
				  border-radius: 16px;
				  padding: 1.5rem;
				  box-shadow: 0 4px 16px rgba(0,0,0,0.1);
				}

				.container h2 {
				  margin-top: 0;
				  font-size: 1.2rem;
				}

				.container p {
				  color: #666;
				  font-size: 0.95rem;
				}

				.btn {
				  display: block;
				  width: 100%;
				  margin: 1rem 0;
				  padding: 0.9rem;
				  background-color: #6d60f6;
				  color: white;
				  border: none;
				  border-radius: 10px;
				  font-weight: bold;
				  font-size: 1rem;
				  cursor: pointer;
				}

				.link {
				  text-align: center;
				  font-size: 0.9rem;
				}

				.link a {
				  color: #6d60f6;
				  text-decoration: none;
				}

				.item {
				  display: flex;
				  align-items: center;
				  justify-content: space-between;
				  padding: 0.7rem 0;
				  border-top: 1px solid #eee;
				}

				.item:first-child {
				  border-top: none;
				}

				.recommendations {
				  max-width: 400px;
				  margin: 1.5rem auto 1rem;
				  background: white;
				  padding: 1.5rem;
				  border-radius: 16px;
				  box-shadow: 0 4px 16px rgba(0,0,0,0.1);
				}

				.recommendations h3 {
				  margin-top: 0;
				}

				footer {
				  text-align: center;
				  padding: 2rem 1rem;
				  font-size: 0.85rem;
				  color: #888;
				}
			  </style>
			</head>
			<body>

			  <div class="header fade-in-up">
				<p>Te damos la bienvenida a</p>
				<h1>Carnicash</h1>
			  </div>

			  <div class="container fade-in-up fade-delay-1">
				<h2>Solo para clientes</h2>
				<p>Recibe increible beneficios al ser cliente de carnicash, gana puntos y obten recompensas exclusivas.</p>
				<button class="btn">√önete ya</button>
				<div class="link">¬øYa tienes una cuenta? <a href="#">Iniciar sesi√≥n</a></div>
			  </div>

			  <div class="recommendations fade-in-up fade-delay-2">
				<h3 style="margin-bottom: 0.5rem;">Programa de Referidos</h3>
				<p style="color: #666; font-size: 0.95rem; margin-bottom: 1.5rem;">
				  Cada vez que tus referidos realicen una compra ganaras puntos.
				</p>

				<div class="item">
				  <div style="display: flex; align-items: center;">
					<span style="font-size: 1.5rem; margin-right: 0.8rem;">üí∏</span>
					<div>
					  <strong>Ellos obtienen</strong><br>
					  <span style="color: #666;">1 punto por cada peso MXN.</span>
					</div>
				  </div>
				</div>

				<div class="item" style="margin-top: 1rem;">
				  <div style="display: flex; align-items: center;">
					<span style="font-size: 1.5rem; margin-right: 0.8rem;">‚≠ê</span>
					<div>
					  <strong>T√∫ obtienes</strong><br>
					  <span style="color: #666;">El 10% de los puntos que ellos reciban.</span>
					</div>
				  </div>
				</div>
			  </div>

			  <footer class="fade-in-up fade-delay-3">
				&copy; 2025 Luis Payan. Todos los derechos reservados.
			  </footer>

			</body>
			</html>					
        """)





    #Mensge que enviara si el usuario si tiene una session iniciada de shopify.
    initial_name = cliente.get('nombre_inicial', 'Bienvenido')
    puntos = cliente.get("puntos_totales", 0)
    email_real = cliente.get("email", "Desconocido")

    historial = cliente.get("historial_pedidos", {})

    items_historial = ""
    for k, v in historial.items():
        fecha = v.get("fecha_compra", "Sin fecha")
        total = v.get("total_compra_mxn", 0)
        razon = v.get("Razon")
        compra_en_tienda = "Compra en tienda"

        puntos_ganados = v.get("puntos_ganados", 0)
        items_historial += f"""
            <div style='margin-bottom: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 8px;'>
                <strong>Orden:</strong> {k}<br>
                <strong>Fecha:</strong> {fecha}<br>
                <strong>Total:</strong> ${total}<br>
                <strong>Motivo:</strong> {razon}<br>
                <strong>Puntos ganados:</strong> {puntos_ganados}
            </div>
        """

    enlace_referido = f"https://cyscfn-wn.myshopify.com/?ref={contact_email}"

    html = f"""
    <html>
    <head>
        <title>Mis puntos</title>
        <style>
            .boton {{
                background-color: #5e4caf;
                color: white;
                padding: 12px 18px;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                cursor: pointer;
                margin-top: 20px;
            }}
            .boton:hover {{
                background-color: #4b3a90;
            }}
        </style>
    </head>
    <body style="font-family: Arial; padding: 20px;">
        <h2>Hola {initial_name}</h2>
        <p>Tus puntos acumulados son:</p>
        <h1 style="color: purple;">{puntos} puntos</h1>

        <button class="boton" onclick="document.getElementById('historial').style.display =
            document.getElementById('historial').style.display === 'none' ? 'block' : 'none'">
            Historial de Puntos
        </button>

        <div id="historial" style="display:none; margin-top:20px;">
            {items_historial if items_historial else "<p>No tienes historial de puntos a√∫n.</p>"}
        </div>

        <div style="margin-top: 40px;">
            <h3>Comparte tu enlace de referido</h3>
            <input id="enlaceReferido" value="{enlace_referido}" readonly style="width: 90%; padding: 10px; font-size: 14px; border-radius: 6px; border: 1px solid #ccc;">
            <button onclick="copiarEnlace()" class="boton" style="margin-top: 10px;">Copiar enlace</button>
            <p id="mensajeCopiado" style="color: green; display: none;">¬°Enlace copiado!</p>
        </div>

        <script>
        function copiarEnlace() {{
            const input = document.getElementById("enlaceReferido");
            input.select();
            input.setSelectionRange(0, 99999); // Para m√≥viles
            document.execCommand("copy");

            const mensaje = document.getElementById("mensajeCopiado");
            mensaje.style.display = "block";
            setTimeout(() => mensaje.style.display = "none", 2000);
        }}
        </script>
    </body>
    </html>
    """


    return HTMLResponse(content=html)










#codigo para que el backend valide y realice la conexion con la aplicacion flotante de shopify.

@app.get("/oauth/callback")
async def oauth_callback(request: Request):
    params = dict(request.query_params)
    code = params.get("code")
    hmac_provided = params.get("hmac")
    shop = params.get("shop")

    if not code or not hmac_provided or not shop:
        return JSONResponse(status_code=400, content={"detail": "Faltan par√°metros en la URL"})

    params_to_check = {k: v for k, v in params.items() if k != "hmac"}
    message = urlencode(sorted(params_to_check.items()))
    hmac_calculated = hmac.new(
        SHOPIFY_CLIENT_SECRET.encode("utf-8"),
        message.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()

    if hmac_calculated != hmac_provided:
        return JSONResponse(status_code=403, content={"detail": "HMAC inv√°lido"})

    access_token_url = f"https://{shop}/admin/oauth/access_token"
    data = {
        "client_id": SHOPIFY_CLIENT_ID,
        "client_secret": SHOPIFY_CLIENT_SECRET,
        "code": code
    }

    try:
        response = requests.post(access_token_url, json=data, verify=False)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print("Error de conexi√≥n con Shopify:", e)
        return JSONResponse(status_code=500, content={
            "detail": "Error al conectar con Shopify",
            "error": str(e)
        })

    token_info = response.json()
    access_token = token_info.get("access_token")
    scope = token_info.get("scope")

    ruta = f"mi_shopify/tiendas/{shop.replace('.', '_')}"
    db.reference(ruta).set({
        "access_token": access_token,
        "scope": scope,
        "fecha_instalacion": datetime.now().isoformat()
    })

    return {
        "mensaje": f"Autenticaci√≥n exitosa para {shop}",
        "token_guardado": True,
        "scope": scope
    }





#Esta fucnion sirve para extraer los datos √∫tiles del payload

def procesar_payload(payload):
    order_info = {
        "shopify_id_order": payload.get("id"),
        "confirmation_number": payload.get("confirmation_number"),
        "numero_orden_tienda": payload.get("name"),
        "estado_pago": payload.get("financial_status"),
        "nombre_cliente": f"{payload.get('customer', {}).get('first_name', '')} {payload.get('customer', {}).get('last_name', '')}",
        "id_cliente": payload.get('customer', {}).get('id', ''),
        "email_cliente": payload.get('customer', {}).get('email', ''),
        "total_de_venta": payload.get("total_line_items_price"),
        "total_impuestos": payload.get("total_tax"),
        "total_pagado": payload.get("total_price"),
        "fecha_compra": payload.get("created_at"),
        "productos": []
    }

    for item in payload.get("line_items", []):
        order_info["productos"].append({
            "nombre_producto": item.get("name"),
            "cantidad": item.get("quantity"),
            "precio_unitario": item.get("price")
        })

    return order_info




##L√≥gica actual
#Se asigna el referidor solo cuando el cliente hace una compra
#Todo ocurre dentro del webhook /webhook/test1
#Solo se registra referidor con una compra real

#Registro de payload crudo y limpio.
#C√°lculo de puntos.
#Asignaci√≥n de referidor si el cliente no tiene uno.
#Asignaci√≥n del 10% de puntos al referidor (si ya fue asignado).



@app.post("/webhook/test1")
async def recibir_webhook(mensaje: Request):
    #Paso 1: Cargar el contenido (JSON) del webhook recibido
    payload = await mensaje.json()
    print("----------------------------------------------")
    print("Webhook completo recibido:")
    pprint(payload)
    print("----------------------------------------------")

    #Paso 2: Procesar la orden y extraer los datos √∫tiles
    orden = procesar_payload(payload)
    print("Informaci√≥n procesada de la orden:")
    pprint(orden)
    print("----------------------------------------------")

    #Paso 3: Extraer ID de la orden y email del cliente
    contact_email = payload.get('customer', {}).get('email', 'sin_email').replace(".", "_").replace("@", "_at_")
    id_orden = str(payload.get("id", "sin_id"))

    #Paso 4: Guardar los payloads crudo y limpio en Firebase
    ruta_crudo = f"mi_shopify/historial_payloads_crudos/{id_orden}"
    ruta_limpio = f"mi_shopify/historial_payloads_limpios/{id_orden}"
    db.reference(ruta_crudo).set(payload)
    db.reference(ruta_limpio).set(orden)

    #Paso 5: Calcular puntos basados en el total pagado
    try:
        total_pagado = float(orden.get("total_pagado", 0))
    except ValueError:
        total_pagado = 0.0

    #Este codigo esta definiciendo que por cada peso gastado se le dara un punto al cliente.
    #Mas adelante si se quiere modificar, esta parte es la que debera de cambiar.
    puntos_ganados = int(total_pagado)



    #  Paso 6: Consulta los puntos actuales del cliente en Firebase
    ruta_cliente = f"mi_shopify/puntos_clientes/{contact_email}"
    cliente_ref = db.reference(ruta_cliente)
    cliente_actual = cliente_ref.get()
    puntos_totales = cliente_actual.get("puntos_totales", 0) + puntos_ganados if cliente_actual else puntos_ganados


    #Paso 7: Asignar referidor si el cliente a√∫n no tiene uno. Aqui tomara el referidor del url cuando recien entra.
    # Usar cart attributes (mejor forma)
    referido_por = None
    note_attrs = payload.get("note_attributes", [])
    for item in note_attrs:
        if item.get("name") == "referido_por":
            referido_por = item.get("value")
            break



    #Aqui revisara, si el cliente ya existe y aun no tiene referido y la compra se hizo por un enlace de referido, entonces asigan el referidor.
    if cliente_actual and not cliente_actual.get("referido_por") and referido_por:
        cliente_ref.update({
            "referido_por": referido_por
        })
        print(f"Referidor {referido_por} asignado al cliente {contact_email}")
        print("----------------------------------------------")



    # Paso 8: Actualizar puntos del cliente y guardar historial de pedido
    cliente_ref.update({
        "email": payload.get('customer', {}).get('email', 'sin_email'),
        "nombre_inicial": payload.get('customer', {}).get('first_name', 'Bienvenido'),
        "puntos_totales": puntos_totales,
        f"historial_pedidos/{orden['shopify_id_order']}": {
            "puntos_ganados": puntos_ganados,
            "total_compra_mxn": total_pagado,
            "Razon": "Compra en tienda.",
            "fecha_compra": orden.get("fecha_compra")
        }
    })
    print(f" Puntos actualizados para {contact_email}: {puntos_totales} puntos")
    print("----------------------------------------------")



    # Paso 9: Si el cliente ya tenia referidor, aqui le otorgaremos el 10% en puntos
    referidor = cliente_actual.get("referido_por") if cliente_actual else None
    if referidor:
        puntos_extra = int(puntos_ganados * 0.10) ##Este es el calculo que se puede cambiar en el futuro.
        ruta_referidor = f"mi_shopify/puntos_clientes/{referidor}"
        ref_ref = db.reference(ruta_referidor)
        ref_data = ref_ref.get()
        puntos_totales_referidor = ref_data.get("puntos_totales", 0) + puntos_extra if ref_data else puntos_extra

        ref_ref.update({
            "puntos_totales": puntos_totales_referidor,
            f"historial_pedidos/bonus_{orden['shopify_id_order']}": {
                "puntos_ganados": puntos_extra,
                "total_compra_mxn": total_pagado,
                "Razon": f"10% por referido {contact_email}",
                "fecha_compra": orden.get("fecha_compra")
            }
        })
        print(f"{referidor} recibi√≥ {puntos_extra} puntos por la compra que hizo su referido {contact_email}")
        print("----------------------------------------------")

    # Paso 10: Respuesta final
    return {"mensaje": "Webhook recibido, almacenado y puntos actualizados exitosamente"}


