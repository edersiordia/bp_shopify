from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from urllib.parse import urlencode
import hmac
import hashlib
import requests
import firebase_admin
from firebase_admin import credentials, db
from datetime import datetime

app = FastAPI()

# Inicializa Firebase
cred = credentials.Certificate("firebase_key.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://rastreador-gps2-default-rtdb.firebaseio.com'
})

# Credenciales de tu app de Shopify
SHOPIFY_CLIENT_ID = "d7ad6eca784abff38f6c1b06e19a0809"
SHOPIFY_CLIENT_SECRET = "51690bac71da36dbb5c00c854cbbdcc6"  # ← Actualiza en entorno real

@app.get("/oauth/callback")
async def oauth_callback(request: Request):
    # Capturar parámetros del query
    params = dict(request.query_params)
    code = params.get("code")
    hmac_provided = params.get("hmac")
    shop = params.get("shop")

    if not code or not hmac_provided or not shop:
        return JSONResponse(status_code=400, content={"detail": "Faltan parámetros en la URL"})

    # Verificar integridad del HMAC
    params_to_check = {k: v for k, v in params.items() if k != "hmac"}
    message = urlencode(sorted(params_to_check.items()))
    hmac_calculated = hmac.new(
        SHOPIFY_CLIENT_SECRET.encode("utf-8"),
        message.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()

    if hmac_calculated != hmac_provided:
        return JSONResponse(status_code=403, content={"detail": "HMAC inválido"})

    # Intercambio del código por token
    access_token_url = f"https://{shop}/admin/oauth/access_token"
    data = {
        "client_id": SHOPIFY_CLIENT_ID,
        "client_secret": SHOPIFY_CLIENT_SECRET,
        "code": code
    }

    try:
        response = requests.post(access_token_url, json=data, verify=False)  # SSL verificación desactivada
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print("Error de conexión con Shopify:", e)
        return JSONResponse(status_code=500, content={
            "detail": "Error al conectar con Shopify",
            "error": str(e)
        })

    token_info = response.json()
    access_token = token_info.get("access_token")
    scope = token_info.get("scope")

    # Guardar token en Firebase
    ruta = f"mi_shopify/tiendas/{shop.replace('.', '_')}"
    db.reference(ruta).set({
        "access_token": access_token,
        "scope": scope,
        "fecha_instalacion": datetime.now().isoformat()
    })

    return {
        "mensaje": f"Autenticación exitosa para {shop}",
        "token_guardado": True,
        "scope": scope
    }

